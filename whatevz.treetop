grammar Whatevz
  rule body
    exprs:expressions {
      def to_ast
        RubySyntax::Body.new exprs.to_ast
      end
    }
  end

  rule expressions
    (sp expression sp nl?)* {
      def to_ast
        RubySyntax::Expressions.new elements.map { |el|
          el.expression.to_ast
        }
      end
    }
  end

  rule expression
    expression:(binary_expression / syntax_unit) {
      def to_ast
        expression.to_ast
      end
    }
  end

  rule binary_expression
    lhs:syntax_unit sp operator sp rhs:syntax_unit {
      def to_ast
        RubySyntax::BinaryExpression.new lhs.to_ast,
                                         operator.text_value,
                                         rhs.to_ast
      end
    }
  end

  rule syntax_unit
    unit:(variable / self) {
      def to_ast
        unit.to_ast
      end
    }
  end

  rule self
    "@" {
      def to_ast
        RubySyntax::Self.new
      end
    }
  end

  rule variable
    variable:(local_variable / instance_variable) {
      def to_ast
        variable.to_ast
      end
    }
  end

  rule local_variable
    identifier {
      def to_ast
        RubySyntax::LocalVariable.new text_value
      end
    }
  end

  rule instance_variable
    "@" identifier {
      def to_ast
        RubySyntax::InstanceVariable.new text_value
      end
    }
  end

  rule identifier
    [_a-z]+
  end

  rule operator
    '+' / '-'
  end

  rule sp
    ' '*
  end

  rule nl
    "\n"
  end
end
