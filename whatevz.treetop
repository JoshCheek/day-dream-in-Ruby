grammar Whatevz
  rule body
    exprs:expressions {
      def to_ast
        RubySyntax::Body.new exprs.to_ast
      end
    }
  end

  rule expressions
    (sp expression sp nl?)* {
      def to_ast
        RubySyntax::Expressions.new elements.map { |el|
          el.expression.to_ast
        }
      end
    }
  end

  rule expression
    head:(variable / self)
    tail:expression_modifiers* {
      def to_ast
        tail.elements.inject head.to_ast do |ast, modifier|
          modifier.to_ast ast
        end
      end
    }
  end

  rule expression_modifiers
    ( (sp modifier:binary_op_call)
    / (   modifier:send_message)
    ) {
      def to_ast(to_modify)
        modifier.to_ast to_modify
      end
    }
  end

  rule send_message
    "." method_name:identifier {
      def to_ast(receiver)
        RubySyntax::SendMessage.new(
          receiver,
          method_name.text_value
        )
      end
    }
  end

  rule binary_op_call
    operator sp rhs:expression {
      def to_ast(lhs)
        RubySyntax::BinaryExpression.new lhs,
                                         operator.text_value,
                                         rhs.to_ast
      end
    }
  end

  rule self
    "@" {
      def to_ast
        RubySyntax::Self.new
      end
    }
  end

  rule variable
    variable:(local_variable / instance_variable) {
      def to_ast
        variable.to_ast
      end
    }
  end

  rule local_variable
    identifier {
      def to_ast
        RubySyntax::LocalVariable.new text_value
      end
    }
  end

  rule instance_variable
    "@" identifier {
      def to_ast
        RubySyntax::InstanceVariable.new text_value
      end
    }
  end

  rule identifier
    [_a-z]+
  end

  rule operator
    '+' / '-'
  end

  rule sp
    ' '*
  end

  rule nl
    "\n"
  end
end
